/*
http://www.apache.org/licenses/LICENSE-2.0.txt


Copyright 2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

package rpc;
import "github.com/intelsdi-x/snap/grpc/common/common.proto";


service MetricManager {
	// managesMetrics from scheduler
	rpc CollectMetrics(CollectMetricsRequest) returns (CollectMetricsResponse) {}
	rpc PublishMetrics(PubProcMetricsRequest) returns (ErrorReply) {}
	rpc ProcessMetrics(PubProcMetricsRequest) returns (ProcessMetricsReply) {}
	rpc ValidateDeps(ValidateDepsRequest) returns (ValidateDepsReply) {}
	rpc SubscribeDeps(SubscribeDepsRequest) returns (SubscribeDepsReply) {}
	rpc UnsubscribeDeps(UnsubscribeDepsRequest) returns (UnsubscribeDepsReply) {}	
	rpc GetAutodiscoverPaths(common.Empty) returns (GetAutodiscoverPathsReply) {}
}

// managesMetrics from scheduler

message SerrorReply{}

message PubProcMetricsRequest{
	repeated common.Metric Metrics = 1;
	string PluginName = 2;
	int64 PluginVersion = 3;
	common.ConfigMap Config = 4;
	string TaskId = 5;
}

message ErrorReply{
	repeated string Errors = 1;
}

message ProcessMetricsReply {
	repeated common.Metric Metrics = 1;
	repeated string Errors = 2;
}

message ValidateDepsRequest {
	repeated common.Metric Metrics = 1;
	repeated common.SubscribedPlugin Plugins = 2;
}

message ValidateDepsReply {
	repeated common.SnapError Errors = 1;
} 

message SubscribeDepsRequest {
	repeated common.Metric Requested = 1;
	repeated common.SubscribedPlugin Plugins = 2;
	string TaskId = 3;
}

message SubscribeDepsReply {
	repeated common.SnapError Errors = 1;
}

message UnsubscribeDepsRequest {
	string TaskId = 1;
}

message UnsubscribeDepsReply {
	repeated common.SnapError Errors = 1;
}

message Map {
        repeated MapEntry Entries = 1;
}

message MapEntry {
        string Key = 1;
        string Value = 2;
}

message CollectMetricsRequest {
	string TaskID = 1;
	map<string, Map> AllTags = 2;
}

message CollectMetricsResponse {
	repeated common.Metric Metrics = 1;
	repeated string Errors = 2;
}


message ArrString {
	repeated common.NamespaceElement S = 1;
}

message GetAutodiscoverPathsReply{
	repeated string Paths = 1;
}
